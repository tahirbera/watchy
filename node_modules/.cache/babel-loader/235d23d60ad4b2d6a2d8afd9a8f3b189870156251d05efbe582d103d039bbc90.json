{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tahir\\\\Desktop\\\\React\\\\React.dev exercises\\\\my-app\\\\src\\\\data.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Fetch = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const url = 'https://imdb-top-100-movies.p.rapidapi.com/top32';\n      const options = {\n        method: 'GET',\n        headers: {\n          'X-RapidAPI-Key': '189773483emshdf5c2b3eaeea748p1e6fe0jsnaf1dd42e45d5',\n          'X-RapidAPI-Host': 'imdb-top-100-movies.p.rapidapi.com'\n        }\n      };\n      try {\n        const response = await fetch(url, options);\n        const result = await response.json();\n        console.log(result); // Log the result to see what the API returns\n        setMovies(result);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchMovies();\n  }, []);\n  console.log(movies); // Log the current state of movies\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: movies.length > 0 ? movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: movie.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Year: \", movie.year]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)]\n    }, movie.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Fetch, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c = Fetch;\nexport default Fetch;\nvar _c;\n$RefreshReg$(_c, \"Fetch\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fetch","_s","movies","setMovies","fetchMovies","url","options","method","headers","response","fetch","result","json","console","log","error","children","length","map","movie","title","fileName","_jsxFileName","lineNumber","columnNumber","year","id","_c","$RefreshReg$"],"sources":["C:/Users/tahir/Desktop/React/React.dev exercises/my-app/src/data.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst Fetch = () => {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      const url = 'https://imdb-top-100-movies.p.rapidapi.com/top32';\r\n      const options = {\r\n        method: 'GET',\r\n        headers: {\r\n          'X-RapidAPI-Key': '189773483emshdf5c2b3eaeea748p1e6fe0jsnaf1dd42e45d5',\r\n          'X-RapidAPI-Host': 'imdb-top-100-movies.p.rapidapi.com'\r\n        }\r\n      };\r\n\r\n      try {\r\n        const response = await fetch(url, options);\r\n        const result = await response.json();\r\n        console.log(result); // Log the result to see what the API returns\r\n        setMovies(result);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchMovies();\r\n  }, []);\r\n\r\n  console.log(movies); // Log the current state of movies\r\n\r\n  return (\r\n    <div>\r\n      {movies.length > 0 ? (\r\n        movies.map((movie) => (\r\n          <div key={movie.id}>\r\n            <h2>{movie.title}</h2>\r\n            <p>Year: {movie.year}</p>\r\n            {/* Add more movie details as needed */}\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Fetch;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMO,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,MAAMC,GAAG,GAAG,kDAAkD;MAC9D,MAAMC,OAAO,GAAG;QACdC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,gBAAgB,EAAE,oDAAoD;UACtE,iBAAiB,EAAE;QACrB;MACF,CAAC;MAED,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAEC,OAAO,CAAC;QAC1C,MAAMK,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACpCC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC,CAAC,CAAC;QACrBR,SAAS,CAACQ,MAAM,CAAC;MACnB,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAEDX,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAENS,OAAO,CAACC,GAAG,CAACZ,MAAM,CAAC,CAAC,CAAC;;EAErB,oBACEH,OAAA;IAAAiB,QAAA,EACGd,MAAM,CAACe,MAAM,GAAG,CAAC,GAChBf,MAAM,CAACgB,GAAG,CAAEC,KAAK,iBACfpB,OAAA;MAAAiB,QAAA,gBACEjB,OAAA;QAAAiB,QAAA,EAAKG,KAAK,CAACC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACtBzB,OAAA;QAAAiB,QAAA,GAAG,QAAM,EAACG,KAAK,CAACM,IAAI;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAFjBL,KAAK,CAACO,EAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIb,CACN,CAAC,gBAEFzB,OAAA;MAAAiB,QAAA,EAAG;IAAU;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACjB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvB,EAAA,CA5CID,KAAK;AAAA2B,EAAA,GAAL3B,KAAK;AA8CX,eAAeA,KAAK;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}